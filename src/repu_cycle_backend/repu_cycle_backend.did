service : {
    "register_user": (text, text, variant { Admin; User }, text) -> (variant { ok: text; err: text });
    "get_user": (text) -> (opt record {
        id: text;
        full_name: text;  // Added to match User struct
        email: text;
        tokens: nat32;
        role: variant { Admin; User };
        preferred_language: text;
        achievements: vec text; // Added to match User struct
        challenges_completed: vec text; // Added to match User struct
        completed_courses: vec text; // Added to match User struct
        passed_quizzes: vec text; // Added to match User struct
        notifications: vec text; // Added to match User struct
    }) query;
    "update_user": (text, nat32) -> (variant { ok: text; err: text });
    "update_preferred_language": (text, text) -> (variant { ok: text; err: text });
    "add_quiz": (text, nat32, vec text, vec text, nat32) -> (variant { ok: text; err: text });
    "log_waste_data": (text, nat32, nat32) -> (variant { ok: float32; err: text });
    "get_footprint": (text) -> (opt record {
        waste_generated: nat32;
        recyclable_waste: nat32;
        footprint_score: float32;
    }) query;
    "add_challenge": (text, text, vec text, vec text) -> (variant { ok: text; err: text });
    "reward_user": (text, text) -> (variant { ok: text; err: text });
    "mint_tokens": (text, nat32) -> (variant { ok: text; err: text });
    "redeem_reward": (text, text) -> (variant { ok: text; err: text }); // Added based on redeem functionality
    "send_notification": (text, text, text) -> (variant { ok: text; err: text }); // Added for notifications
    "submit_feedback": (text, text) -> (variant { ok: text; err: text }); // Added for feedback
    "get_leaderboard": () -> (vec record { id: text; tokens: nat32 }); // Corrected for leaderboard
    "validate_data": () -> (variant { ok: text; err: text }); // Added for data validation
}
